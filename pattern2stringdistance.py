import sys

#lines = sys.stdin.read().splitlines()
#l1=lines[0]
#l2=lines[1]

l1='ATCAAC'
l2='AGGTGTTTATCGGAAGGCATCCGGAGCTTCTCCGGTCTTTCTAAGTAGCAAATAAGGCCCAAGGGGTTAGCAAGGACGGCAAGCTCCCCGTCGGC CTCCTCAGCGATCGCTCACTTACTGCGTTGACAAATGTTAGACGCGCTAGCTTTAAAAGAGAGACGATCGTGGTTCGTTGCTTGCGCACTTATCT AGCAACGCCGGCCACGTGTGCCTACGTAGGATAGAATCTATTCATGCTTCTGGGGTACCGCAGCGATCCCGAGAAGCGCGACGATGTACGGCACA TGAAAATGTTAATAGGCGGTGGATCCTGTGATCCCCGTCCTCGGGTGAGCAGTCTACACGGGCTCATACCGCGAGGGCGGATTCTCACACCTTCC TCGGGGGAGCGTTAGCGGGCGATGGCATTAGTAGCAGTAGCTCGATTGCCTCCGGTAACTTTTCAGATGGTCCACATGGAGATGTTACCCATCTC TGGCGATTGGATGTGCTTAAGATCGCCCCCTTCCTACATGTTCAAATCGATTACGGGGTGGCGACATAGTGTCACCGTGTGCTAATAAGATTAGA GAATCATACATTACACTGTAAGCCTGCTATATAAGTAGGCTGTGAGTGTTGGCATAATGCCAAGACGCCGCCGCGGTCGAATGATCTCCTCAGTA CCACCCGTGTGACAATCGGGTCACCGGTAAGTTGTGAGACGTAATAATGCTTGCTTGTCTGTCCTCTTGCATGAGTTGGAGACAGGTCACTGAAA GCGGCAGAATGTAGTGGTGTAGATCTCTTCTGGGCCGCCTGACGGGCGTGTTACTTTAAACTCGTCCTTCCCGAATCTAGAGGCCCAGCCTGGAT AATTGCGAGGGTTTAGTGTATCTCCTTGTCTCTAGGGATTGGGCGAACGGGCTAGGGATAGTCACGGGGATAGGACGTGTCTACAAACGTGCAAG CTATTACACCGATTTAGGTGTACTATTCACCTATAATGACCATTTTCTTAGCGTCGAACATTACTTCGAGCCGACGTGCGTGTGGTAGAGTGGGT GTGTCCACCCGATTCCGCTTACCAGCCCACTACAGGCCGAATTCGGACATGGAAGCGAAAGAGACCCTTTGTCCTAAGGAGTGTGAGAACAAAAC CTGCCTATCACGTATCATTAGATTCAACACACTAAGCCCCACGCCAAGATTTGCAACAATTAACCGTGACGGCGGAGCTAAAAAATCAACTCAAT GGGCTAGATTAGTTTCCACCCTACGACACTGTGCGCCCGCAGGAGATTTAGAAAAACGACGTGCTGAATTTAAGTGGTAAGATGATGACATGCTC GCCCTTAACATGCGGCTACTTCCGGTGGCTTACGTACTCTTTTTGGTGATCGTCATTACGTGTATCTTCGACATATCCGAACCCATGAGCTGGAT GATTGGTGTAGTACTGGTACCGGCAATAAGAGAACTTTGATAGGACAAGTCGGTGGTAACAGAGGCTATAACCGGGTGGTGGGTGATCATCCCCC ACTCTAAGTCCTGGTTCCCGCAGTAGTATCTTTCTCGTTCCATACGCCGATCTGCCTATTTAGGTTTTGTGGGTACAAGGGCAATATACCACAAC GAACAATTGCGGTAAAAATATAAGATTGAACACGGTCTGCGGACTTGCTGGGTGCTCGTCAGTTGGGCTTTGGGTATGAACTACGAGAGCGCTAA TAGAATCCATTTCGATAATACTTGCAAGTAATCATATGGTGACACCAGTTAGTGTAAGCCAGGGCCATGCAACATGGTACTCCAGCGTACATTGG AGGCCTAGTGCGACGTACCTCGCTCTGGCCGCTACTAATAACAATCTTCCTCCTGAGGTTATCACTCTCCAAGCGGTAGACGTGCGGAGTCCTTC AGTTAAGTACATATTGGTGAAGGCAGGTGTCGAGCACTCCGGAAACGCCTCGGGCACGACTCACAATCTTCGGAATCCCATCTGTTGCGTCCTTA CATGTGGTTACCTTGTTGTCTGAGCGAGAGAATGCGACTCTCGTTAATGGTCGCGCACCAAATCGCGATTGCGCTTGTTTCGAGGAGCACCTTGA CTCGACGACGCTTGCACTTGTGGCAACGTTCTAGTAGGAAACGACCTATTGTTCTTACGACATCCGAAGGGATGACCACATGCCTAAGCGAACGT ATGTACTACCAGTCGTCAGCAAGTAAGGAACACAGAGGCAGGGAAAGCTTCGATATGCGACCATCGACTGGACGACCCGGTATTACGGAATTCCG GTTCTAGCCTACGGCGCACTAGTGTCGTGGTTAGTCGTACAAGTTTCTGCCCCGTCTCAAAAGAAAAAAGCTTAGAACGTGGCACGCTGGGGGTG CTCCATTCCGAATCCGACCGCAAACCCGATACCAATTGCGCAGGCAGTTAGTTGCCAACAATCTCAACATTCGGACATCCCCTTGGACCGCTCCC GTGGTCCCATGCACCAAAGCTGGGTGTTAGTATAACACCAGTAGTGCAGCCGGGCGCTTTTAGTGGCTGGCGTTATCACGAAAAGTTTCCAAAAA TCTCCACTTCTGGATGCACAAAACGAAGCAATCGCAGGCTGGATTGTACACTCGTGAGATCTTAGATCATAGTAGACCACAGTTTTTTCAGAAGC GGGCGGATATGTCTGGAAGTCGTGCCGTGTCATTCAGACCGGCTTTCTGTACCGGGACGTGAAGAGATAGTTCGATCCGAGTCATATCGTGAGTT GCTAGGCTACTCTTGAGAGGGGTGTGCGCATGGGAATTCTAAGGCGTCAGAGAAGCTTGGAACCTTCTGTGCCTTTCATCTTGCACGCGTATATT GACTAGAAACGAACCGTCTCTCGAAGTAATATCGATTCACTGCATACTTATCCGGAACATGGTAAAAGTGCCGGGACACACGTACTGATCAACAG TCAAATCTAGCGGCACATGACGAAAGGAACCGGTAAGAGGTTTACCTATACCACTGGCGGGGGATGACCTATGTTGGGAGAACTGACAACGCACC AAGTCAGAAAACTCAGATGTCAGGAAATTCAATAGGTATGAGCCTGTAGGACGGGGACAGGTCGTATCTACCAGTTACGGGTTACAGATAAGCAT ATGCCTGTTGAGCTTCGGCTCAAAACGCTATTCGAATCTCATGATATACACCGCAGGCTAAGACGAGGCCCCTATACATCGCTACCTGTATGGTG AAAGTTTGCGCCTCCGGCGCCCCTGGCTCCGCTGCCGGCTTGACTCAATTCCGCTGCTGGGCTTAGCGAACGCGAGAGGCTCCGCACGTTTGACT CTTGGTTCCCGGAGTTGCGCCGAATCTAAGAGTCCCGGTTACTAGTAGCGTAGATCTCCGTGATGTGGACATTTAGGCTACTTTTCACTCGCTTG GACACCGTGCGGATTAAGCGTCTAAAATTTCGTCTAGGCAAGTGTAAGTAGCTCCTCCTCCTGTAGTTTACCCAGCAGCAACGGGTAAAGGCTAG CCAGCTCCCTCCGTCGTATCCTCCCGTATCGCTTTGACTGTATCGAGGTTTGTAGGTTTCCCAAGGTCGGAAAAAGCGGTGGATTATCGAAGTAG'

l1='AAA'
l2='TTACCTTAAC GATATCTGTC ACGGCGTTCG CCCTAAAGAG CGTCAGAGGT'

kmer=l1

def HammingDistance(g1, g2):
    distance = 0
    for i, j in zip(g1, g2):
        if i != j:
            distance = distance + 1
    return distance


def pattern2stringdst(dnastr,kmer):
    dna = list()
    dna[:]=[]
    for block in dnastr.split(' '):
        dna.append(block)
    totaldst=0

    for block in dna:
        hdst=99999999999
        chunksize=len(block) - len(kmer)
        for n in range(0, chunksize+1, 1):
            chunk=block[n:n+len(kmer)]
            currhdst=HammingDistance(kmer,chunk)
            if hdst>currhdst:
                hdst=currhdst
        totaldst=totaldst+hdst
    return totaldst

print(pattern2stringdst(l2,l1))
#print (dna)

